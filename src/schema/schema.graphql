type Query {
    "Listado de temporadas"
    seasonList: [Season!]!
    "Carreras realizadas en cada temporada"
    racesByYear(year: String!): [Race!]!
    "Carrera seleccionada por año y numero"
    raceSelect(year: String!, round: Int!): Race
    "Listado de pilotos de toda la historia"
    historyDrivers(pageElements: Int, page: Int): [Driver!]!
    "Listado de pilotos de una temporada"
    driversByYear(year: String!): [Driver!]!
    "Listado de pilotos de una carrera en una temporada"
    driversByYearAndRound(year: String!, round: Int!): [Driver!]!
    "Información de piloto a partir de su ID"
    driverById(id: String!): Driver
    "Clasificacion final de los pilotos de una temporada"
    seasonDriverRanking(year: String!): [DriverStanding!]!
    "Circuitos historicos"
    historyCircuits(pageElements: Int, page: Int): [Circuit!]!
}

type Season {
    year: String!
    url: String!
    urlMobile: String!
}

type Race {
    season: String!
    round: String!
    url: String!
    urlMobile: String!
    name: String!
    circuit: Circuit!
    date: String!
    time: String!
}

type Circuit {
    id: String!
    url: String!
    urlMobile: String!
    name: String!
    location: Location!
}

type Location {
    lat: String!
    lng: String!
    locality: String!
    country: String!
}

type Driver {
    id: String!
    url: String!
    urlMobile: String!
    name: String!
    dateOfBirth: String!
    nationality: String!
    permanentNumber: String
    code: String
}

type DriverStanding {
    position: String!
    positionText: String!
    points: String!
    wins: String!
    driver: Driver!
    constructors: [Constructor!]!
}

type Constructor {
    id: String!
    url: String!
    urlMobile: String!
    name: String!
    nationality: String!
}